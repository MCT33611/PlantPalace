@model OfferVM
@{
}
<!--<style>
    select {
        display: none !important;
    }

    .dropdown-select {
        background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.25) 0%, rgba(255, 255, 255, 0) 100%);
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#40FFFFFF', endColorstr='#00FFFFFF', GradientType=0);
        background-color: #fff;
        border-radius: 6px;
        border: solid 1px #eee;
        box-shadow: 0px 2px 5px 0px rgba(155, 155, 155, 0.5);
        box-sizing: border-box;
        cursor: pointer;
        display: block;
        float: left;
        font-size: 14px;
        font-weight: normal;
        height: 42px;
        line-height: 40px;
        outline: none;
        padding-left: 18px;
        padding-right: 30px;
        position: relative;
        text-align: left !important;
        transition: all 0.2s ease-in-out;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        white-space: nowrap;
        width: auto;
    }

        .dropdown-select:focus {
            background-color: #fff;
        }

        .dropdown-select:hover {
            background-color: #fff;
        }

        .dropdown-select:active,
        .dropdown-select.open {
            background-color: #fff !important;
            border-color: #bbb;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05) inset;
        }

        .dropdown-select:after {
            height: 0;
            width: 0;
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            border-top: 4px solid #777;
            -webkit-transform: origin(50% 20%);
            transform: origin(50% 20%);
            transition: all 0.125s ease-in-out;
            content: '';
            display: block;
            margin-top: -2px;
            pointer-events: none;
            position: absolute;
            right: 10px;
            top: 50%;
        }

        .dropdown-select.open:after {
            -webkit-transform: rotate(-180deg);
            transform: rotate(-180deg);
        }

        .dropdown-select.open .list {
            -webkit-transform: scale(1);
            transform: scale(1);
            opacity: 1;
            pointer-events: auto;
        }

        .dropdown-select.open .option {
            cursor: pointer;
        }

        .dropdown-select.wide {
            width: 100%;
        }

            .dropdown-select.wide .list {
                left: 0 !important;
                right: 0 !important;
            }

        .dropdown-select .list {
            box-sizing: border-box;
            transition: all 0.15s cubic-bezier(0.25, 0, 0.25, 1.75), opacity 0.1s linear;
            -webkit-transform: scale(0.75);
            transform: scale(0.75);
            -webkit-transform-origin: 50% 0;
            transform-origin: 50% 0;
            box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.09);
            background-color: #fff;
            border-radius: 6px;
            margin-top: 4px;
            padding: 3px 0;
            opacity: 0;
            overflow: hidden;
            pointer-events: none;
            position: absolute;
            top: 100%;
            left: 0;
            z-index: 999;
            max-height: 250px;
            overflow: auto;
            border: 1px solid #ddd;
        }

            .dropdown-select .list:hover .option:not(:hover) {
                background-color: transparent !important;
            }

        .dropdown-select .dd-search {
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0.5rem;
        }

        .dropdown-select .dd-searchbox {
            width: 90%;
            padding: 0.5rem;
            border: 1px solid #999;
            border-color: #999;
            border-radius: 4px;
            outline: none;
        }

            .dropdown-select .dd-searchbox:focus {
                border-color: #12CBC4;
            }

        .dropdown-select .list ul {
            padding: 0;
        }

        .dropdown-select .option {
            cursor: default;
            font-weight: 400;
            line-height: 40px;
            outline: none;
            padding-left: 18px;
            padding-right: 29px;
            text-align: left;
            transition: all 0.2s;
            list-style: none;
        }

            .dropdown-select .option:hover,
            .dropdown-select .option:focus {
                background-color: #f6f6f6 !important;
            }

            .dropdown-select .option.selected {
                font-weight: 600;
                color: #12cbc4;
            }

                .dropdown-select .option.selected:focus {
                    background: #f6f6f6;
                }

        .dropdown-select a {
            color: #aaa;
            text-decoration: none;
            transition: all 0.2s ease-in-out;
        }

            .dropdown-select a:hover {
                color: #666;
            }

</style>-->
<style>
    #popup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        z-index: 1000;
    }

    #productList {
        max-height: 400px; /* Set your desired height */
        width: 600px; /* Set your desired height */
        overflow-y: auto;
        list-style-type: none; /* Remove default list style */
        padding: 0; /* Remove default padding */
        margin: 0; /* Remove default margin */
    }
</style>
<form asp-action="Upsert" asp-controller="Offer">
    <input asp-for="Offer.Id" type="hidden" />

    <input asp-for="Offer.ImageUrl" type="hidden" />
    <input name="newfile" id="newfile" type="text" hidden />
    
    <div class="border p-3 mt-4">
        <div class="row pb-2">
            <h2 class="text-primary">
                @(Model.Offer.Id == 0 ? "Create" : "Edit") Offer
            </h2>
            <hr />
        </div>

        <div class="card mb-3">
            <div class="card-header">Crop Image Main</div>
            <div class="card-body">
                <div id="cropper" data-default="" hidden></div>

            </div>
            <div class="card-footer row">
                <input type="file" id="img" class="form-control" accept="image/*" />
                <button type="button" id="newfileupload" style="margin-top:10px" hidden class="btn btn-success">Crop</button>
            </div>
        </div>
        <div class="row p-1 mb-3">
            <button type="button" id="showPopupBtn" class="btn btn-secondary">Select Products</button>
        </div>
        <div id="popup">
            <input class="form-control" type="text" placeholder="Search products" id="searchInput">
            <ul id="productList">
                @foreach (var product in Model.Products)
                {
                    <li>
                        <input type="checkbox" class="form-check" value="@product.Id" name="selectedProducts" id="@("chk_" + product.Id)">
                        <label for="@("chk_" + product.Id)">
                            <img src="@product.ImageUrl" width="50" />
                            <span class="productName text-nowrap text-truncate" data-category="@product.Category.Name" data-subcategory="@product.SubCategory">@product.Name</span>
                        </label>
                    </li>
                }
                
            </ul>
            <button type="button" id="selectAllBtn" class="btn btn-info m-3">Select All</button>
            <button type="button" id="OkBtn" class="btn btn-info m-3">Ok</button>
            <button type="button" id="ClearBtn" class="btn btn-info m-3">Clear</button>
        </div>
        <div class="row p-1 mb-3">
            <select asp-for="Offer.OfferType">
                <option value="banner" selected>Banner</option>
                <option value="offer">Offer</option>

            </select>
        </div>
        <div class="row p-1 mb-3">
            <label asp-for="Offer.OfferName" class="p-0"></label>
            <input asp-for="Offer.OfferName" class="form-control" />
            <span asp-validation-for="Offer.OfferName" class="text-danger"></span>
        </div>
        <div class="row p-1 mb-3">
            <label asp-for="Offer.OfferPercent" class="p-0"></label>
            <input asp-for="Offer.OfferPercent" class="form-control" id="offerPriceInput" min="1" max="99" />
            <span asp-validation-for="Offer.OfferPercent" class="text-danger"></span>
        </div>
        @* <div class="row p-1 mb-3">
            <label asp-for="Offer.OfferUrl" class="p-0"></label>
            <input asp-for="Offer.OfferUrl" class="form-control" />
            <span asp-validation-for="Offer.OfferUrl" class="text-danger"></span>
        </div> *@
        <div class="row p-1 mb-3">
            <label asp-for="Offer.Description" class="p-0 text-muted"></label>
            <textarea asp-for="Offer.Description" class="form-control"></textarea>
        </div>
        @* <div class="my-3">
            <input asp-for="IsBanned" class="form-check-input" type="checkbox" id="flexCheckChecked" name="IsBanned">
            <label class="form-check-label" for="flexCheckChecked">
                Offer Published or Not
            </label>
        </div> *@
        <div class="row ">
            <div class="col-6 col-md-3">
                <button type="submit" class="btn btn-primary form-control">@(Model.Offer.Id == 0 ? "Create":"Edit")</button>
            </div>
            <div class="col-6 col-md-3">
                <a asp-action="Index" asp-controller="Offer" class="btn btn-secondary border form-control">Back TO List</a>
            </div>
        </div>
    </div>
</form>
@section Scripts{
    <script>
        tinymce.init({
            selector: 'textarea',
            plugins: 'anchor autolink   emoticons  searchreplace  visualblocks wordcount',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | align lineheight | numlist bullist indent outdent | removeformat',
        });
    </script>
    <script>
        $(document).ready(function () {
            function initializeCropper(elementId, defaultImageUrl, resultInputId) {
                var cropper = $('#' + elementId);
                cropper.croppie({
                    viewport: {
                        width: 750,
                        height: 225,
                    },
                    boundary: {
                        width: 1000,
                        height: 500
                    },
                    showZoomer: true,
                    enableResize: true,
                    url: defaultImageUrl,
                    format: 'png'
                });

                // Find the file input inside the same card
                var fileInput = cropper.closest('.card').find('input[type="file"]');

                fileInput.on('change', function () {
                    $('#' + elementId).removeAttr('hidden');

                    $('#' + resultInputId + 'upload').removeAttr('hidden');
                    var input = this;
                    if (input.files && input.files[0]) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            cropper.croppie('bind', {
                                url: e.target.result
                            });
                        };
                        reader.readAsDataURL(input.files[0]);
                    }
                });

                // Find the button inside the same card
                console.log('cropper:', cropper);
                console.log('resultInputId:', resultInputId);

                var cropButton = cropper.closest('.card').find('#' + resultInputId + 'upload');
                console.log('cropButton:', cropButton);

                cropButton.on('click', function () {
                    console.log('Crop button clicked');

                    cropper.croppie('result', {
                        type: 'blob',
                        format: 'png', // or 'jpeg' or another supported format
                    }).then(function (blob) {
                        var formData = new FormData();
                        formData.append('FORfilename', 'Offer.png');

                        formData.append('file', blob);

                        $.ajax({
                            url: '@Url.Action("CropAndSave", "Offer", new { area = "Admin" })',
                            method: 'POST',
                            data: formData,
                            contentType: false,
                            processData: false,
                            success: function (response) {
                                if (response.message === 'OK') {
                                    Swal.fire({
                                        position: "center-center",
                                        icon: "success",
                                        title: "Your Offer has been saved",
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    $('#' + resultInputId + 'upload').attr('hidden', true);

                                    $('#' + resultInputId).val(response.filename);
                                } else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Oops...",
                                        text: "Something went wrong!",
                                        footer: '<a href="#">Why do I have this issue?</a>'
                                    });
                                }
                            },
                            error: function () {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: "Something went wrong!",
                                    footer: '<a href="#">Why do I have this issue?</a>'
                                });;
                            }
                        });
                    });
                });
            }

            initializeCropper('cropper', $('#cropper').attr('data-default'), 'newfile');
        });
    </script>
    <!--<script>
        function create_custom_dropdowns() {
            $('select').each(function (i, select) {
                if (!$(this).next().hasClass('dropdown-select')) {
                    $(this).after('<div class="dropdown-select wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current text-truncate"></span><div class="list"><ul></ul></div></div>');
                    var dropdown = $(this).next();
                    var options = $(select).find('option');
                    var selected = $(this).find('option:selected');
                    dropdown.find('.current').html(selected.data('display-text') || selected.text());
                    options.each(function (j, o) {
                        var display = $(o).data('display-text') || '';
                        dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
                    });
                }
            });

            $('.dropdown-select ul').before('<div class="dd-search"><input id="txtSearchValue" autocomplete="off" onkeyup="filter()" class="dd-searchbox" type="text"></div>');
        }

        // Event listeners

        // Open/close
        $(document).on('click', '.dropdown-select', function (event) {
            if ($(event.target).hasClass('dd-searchbox')) {
                return;
            }
            $('.dropdown-select').not($(this)).removeClass('open');
            $(this).toggleClass('open');
            if ($(this).hasClass('open')) {
                $(this).find('.option').attr('tabindex', 0);
                $(this).find('.selected').focus();
            } else {
                $(this).find('.option').removeAttr('tabindex');
                $(this).focus();
            }
        });

        // Close when clicking outside
        $(document).on('click', function (event) {
            if ($(event.target).closest('.dropdown-select').length === 0) {
                $('.dropdown-select').removeClass('open');
                $('.dropdown-select .option').removeAttr('tabindex');
            }
            event.stopPropagation();
        });

        function filter() {
            var valThis = $('#txtSearchValue').val();
            $('.dropdown-select ul > li').each(function () {
                var text = $(this).text();
                (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();
            });
        };
        // Search

        // Option click
        $(document).on('click', '.dropdown-select .option', function (event) {
            $(this).closest('.list').find('.selected').removeClass('selected');
            $(this).addClass('selected');
            var text = $(this).data('display-text') || $(this).text();
            $(this).closest('.dropdown-select').find('.current').text(text);
            $(this).closest('.dropdown-select').prev('select').val($(this).data('value')).trigger('change');
        });

        // Keyboard events
        $(document).on('keydown', '.dropdown-select', function (event) {
            var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
            // Space or Enter
            //if (event.keyCode == 32 || event.keyCode == 13) {
            if (event.keyCode == 13) {
                if ($(this).hasClass('open')) {
                    focused_option.trigger('click');
                } else {
                    $(this).trigger('click');
                }
                return false;
                // Down
            } else if (event.keyCode == 40) {
                if (!$(this).hasClass('open')) {
                    $(this).trigger('click');
                } else {
                    focused_option.next().focus();
                }
                return false;
                // Up
            } else if (event.keyCode == 38) {
                if (!$(this).hasClass('open')) {
                    $(this).trigger('click');
                } else {
                    var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
                    focused_option.prev().focus();
                }
                return false;
                // Esc
            } else if (event.keyCode == 27) {
                if ($(this).hasClass('open')) {
                    $(this).trigger('click');
                }
                return false;
            }
        });

        $(document).ready(function () {
            create_custom_dropdowns();
        });
    </script>-->
    <!--<script type="text/javascript">
        $(document).ready(function () {
            $('#productIdDropdown').change(function () {
                var selectedProductId = $(this).val();
                var selectedProductPrice = parseFloat($('option:selected', this).data('product-price'));

                if (selectedProductId !== '0') {
                    $('#offerPriceInput').attr('max', selectedProductPrice);
                } else {
                    // Reset the 'max' attribute if no product is selected
                    $('#offerPriceInput').removeAttr('max');
                }
            });
        });
    </script>-->
    <script>
        $(document).ready(function () {
            // Show the popup
            $("#showPopupBtn").click(function () {
                $("#popup").show();
            });

            // Filter products based on search input
            $("#searchInput").on("input", function () {
                var filter = $(this).val().toUpperCase();
                $("#productList li").each(function () {
                    var productName = $(this).find(".productName").text().toUpperCase();
                    var category = $(this).find(".productName").data("category").toUpperCase();
                    var subcategory = $(this).find(".productName").data("subcategory").toUpperCase();

                    var shouldShow =
                        productName.includes(filter) ||
                        category.includes(filter) ||
                        subcategory.includes(filter);

                    $(this).toggle(shouldShow);
                });
            });
            // Select only the searched products
            $("#selectAllBtn").click(function () {
                var $searchedCheckboxes = $("#productList li:visible input[type='checkbox']");
                $searchedCheckboxes.prop("checked", !$searchedCheckboxes.prop("checked"));
            });
            // Save selected products
            $("#OkBtn").click(function () {
                // Code to save selected products
                $("#popup").hide();
            });

            // Clear all checkboxes
            $("#ClearBtn").click(function () {
                $("#productList input[type='checkbox']").prop("checked", false);
            });
        });
    </script>
    
    @{
        <partial name="_ValidationScriptsPartial.cshtml" />
    }
}